## Nomination
# This is all about Task 7
import requests

def gps_coordinate(city):

    base_url = f"https://us1.locationiq.com/v1/search?key=pk.37e94aa3017ca984d06aff04b69037ef&q={city}&format=json&"
    
    response = requests.get(base_url)
    # response.raise_for_status()
    data = response.json()
    if data:
        latitude = float(data[0]['lat'])
        longitude = float(data[0]['lon'])
        return {'latitude': latitude, 'longitude': longitude}
    else:
        return None
# Uncomment the following lines for testing

# Testing the gps_coordinate function
# assert gps_coordinate("Cairns") == {'latitude': -16.9206657, 'longitude': 145.7721854}
# assert gps_coordinate("Queensland") == {'latitude': -17.1022281, 'longitude': 145.7650465401662}

user_input=input("enter the city name:")
city=user_input
print(gps_coordinate(city))


## Sighting
# sighting.py
from wildlife import  get_species_list ,get_surveys_by_species
from nominatim import gps_coordinate


# Define constant radius
RADIUS = 100000  # 100 km

def gps(city):
    # Call the gps_coordinate function
    return gps_coordinate(city)

""" 8.1 This is for task 8 only to run this task you want to uncommant this part start """
user_input=input("enter the city name:")
city=user_input
""" 8.1 This is for task 8 only to run this task you want to uncommant this part end """


""" 9.1 This is for task 9 and also you have to uncommant 8.1 """
user_input_taxonid=input("Enter the taxonid of species:")
taxonid=user_input_taxonid
""" 9.1 part end"""

coordinate = gps(city)
# print(coordinate)

# print(species_list)


""" 8.2 This is for task 8 only to run this task you want to uncommant this part start"""
if __name__ == "__main__":
    # Test case: Retrieving species list for a coordinate and radius
    coordinate = (coordinate['latitude'],coordinate['longitude'])
    result = get_species_list(coordinate, RADIUS)

    for entry in result:
        if "AcceptedCommonName" in entry:
            print (
                "Taxon ID : "+ str(entry["TaxonID"]) + "\n"
                "name of species : "+ str(entry["AcceptedCommonName"]) + "\n"
                "Pest status : "+ str(entry["PestStatus"]) + "\n")
            
""" 8.2 This is for task 8 only to run this task you want to uncommant this part end"""


    # print(f"\n Species list for coordinate {coordinate} and radius {RADIUS}: {result}")

""" 9.2 This is for task 9 only to run this task you want to uncommant this part start"""
if __name__ == "__main__":
     # Test case: Retrieving species list for a coordinate and radius
     coordinate = (coordinate['latitude'],coordinate['longitude'])
     result = get_surveys_by_species(coordinate,RADIUS,taxonid)
    
     # print(f"Species survey for coordinate {coordinate} radius {RADIUS} and taxonid {taxonid}: {result}")

survey = []
    for entry in result["features"]:
         species_details = entry["properties"]
         survey.append(species_details)
    
    for i in survey:
         locality_details = i["LocalityDetails"]
         start_date = i["StartDate"]
print(f"Animal was sighted in {locality_details} on {start_date}\n")

""" 9.2 This is for task 9 only to run this task you want to uncommant this part end"""
"""And also Task 10 Include in this file"""



## Wildlife
# wildlife.py
import requests

def get_species_list(coordinate, radius):

    # Unpack coordinates
    latitude, longitude = coordinate

    url = f"https://apps.des.qld.gov.au/species/?op=getspecieslist&kingdom=animals&circle={latitude},{longitude},{100000}"

    response = requests.get(url)

    data = response.json()

    species_list = []
    for species in data['SpeciesSightingSummariesContainer']['SpeciesSightingSummary']:
        species_data= species['Species']
        species_list.append(species_data)
        
    return species_list

def get_surveys_by_species(coordinate, radius, taxonid):
    url = f"https://apps.des.qld.gov.au/species/?op=getsurveysbyspecies&taxonid={taxonid}&&circle={coordinate},{radius}"
    response = requests.get(url)
    data = response.json()
    return data



# assert get_surveys_by_species("-16.92,145.777", 100000, "860")


# Testing the function get_surveys_by_species
if __name__ == "__main__":
     # Test case: Retrieving species list for a coordinate and radius
     coordinate = (-16.92, 145.777)
     radius = 100000
     result = get_species_list(coordinate, radius,)
     print(f"Species list for coordinate {coordinate} and radius {radius}: {result}")

    # Additional test cases can be added as needed

